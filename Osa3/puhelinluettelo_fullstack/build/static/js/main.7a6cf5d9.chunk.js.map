{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","delete","id","put","Button","clicked","text","onClick","FilterInput","filterName","setFilter","value","onChange","event","target","AddPerson","newName","setNewName","newNumber","setNewNumber","persons","setPersons","setSuccessMessage","setErrorMessage","onSubmit","preventDefault","newPerson","name","number","some","person","person_holder","find","window","confirm","personsService","returnedPerson","setTimeout","catch","error","concat","console","log","type","ShowPersons","filtered","filter","toLowerCase","includes","map","i","key","noteObject","SuccessNotification","message","className","ErrorNotification","App","useEffect","pers","useState","successMessage","errorMessage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a6cf5d9.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst get_json = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst add_json = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst delete_json = (newObject) => {\r\n    const request = axios.delete(`${baseUrl}/${newObject.id}`)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\nconst update_json = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\n  export default { get_json, add_json, delete_json, update_json}\r\n","import React, { useState, useEffect } from 'react'\r\nimport personsService from './services/persons'\r\nimport './index.css'\r\n\r\nconst Button = ({clicked, text}) => (\r\n  <button onClick = {clicked}>\r\n    {text}\r\n  </button>\r\n)\r\n\r\nconst App = () => {\r\n\r\n  useEffect(() => {\r\n    personsService\r\n      .get_json()\r\n      .then(pers => {\r\n        setPersons(pers)\r\n      })\r\n  }, [])\r\n\r\n  const [ persons, setPersons ] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber] = useState('')\r\n  const [filterName, setFilter] = useState('')\r\n  const [successMessage, setSuccessMessage] = useState(null)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  \r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <SuccessNotification message={successMessage}/>\r\n      <ErrorNotification message={errorMessage}/>\r\n      <FilterInput filterName = {filterName} setFilter = {setFilter}/>\r\n      <h2>add a new</h2>\r\n        <AddPerson newName = {newName} setNewName = {setNewName} \r\n        newNumber = {newNumber} setNewNumber = {setNewNumber} \r\n        persons = {persons} setPersons = {setPersons}\r\n        setSuccessMessage = {setSuccessMessage} setErrorMessage = {setErrorMessage}/>\r\n      <h2>Numbers</h2>\r\n        <ShowPersons persons = {persons} filterName = {filterName} setPersons = {setPersons} setSuccessMessage = {setSuccessMessage}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n//again handle event here, probably not great\r\n//takes care of the input field, and passes the filterName value \r\n//so we can filter by it in ShowPersons.\r\nconst FilterInput = ({filterName, setFilter}) => {\r\n  const handleFilterChange = (event) => {\r\n    setFilter(event.target.value)\r\n  }\r\n  return (\r\n  <form>\r\n    <div>filter shown with <input value = {filterName} onChange = {handleFilterChange}/></div>\r\n  </form>\r\n)}\r\n\r\n//is there any better way to do this (giving a lot of parameters)??\r\n//tried to send it off as list but that did not work \r\n//also this const is quite long, and gets messy...\r\nconst AddPerson = ({newName, setNewName, newNumber, setNewNumber, persons, setPersons, setSuccessMessage, setErrorMessage}) => {\r\n  \r\n  //probably not allowed to do this...\r\n  //but so far not causing any errors.\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n  //just a easy way to update the json\r\n  const add_to_json = (noteObject) => {\r\n    personsService\r\n      .add_json(noteObject)\r\n      .then(returnedPerson => {\r\n        setPersons(persons.concat(returnedPerson))\r\n        setNewName('')\r\n        setNewNumber('')\r\n        //to display the message for 5 s\r\n        setSuccessMessage(`Added ${returnedPerson.name}`)\r\n        setTimeout(() => {\r\n          setSuccessMessage(null)\r\n        }, 5000)\r\n      })\r\n      .catch(error => {\r\n        console.log(error.response.data.error)\r\n        setErrorMessage(`${error.response.data.error}`)\r\n      })\r\n  }\r\n\r\n  const addName = (event) =>{\r\n    event.preventDefault()\r\n    const newPerson = { name: newName, number: newNumber }\r\n    if (persons.some(person => person.name === newPerson.name)) {\r\n      //so this is probably not ideal, since I do the same task twice, but It will do for now\r\n      const person_holder = persons.find(person => person.name === newPerson.name)\r\n        if (window.confirm(`${person_holder.name} is already added in to the phonebook, replace the old number with the new one?`)) {\r\n          personsService\r\n          .update_json(person_holder.id,newPerson)\r\n          .then(returnedPerson => {\r\n            //redacted comment¤¤¤\r\n            //again added the real time update, pretty much copied how I did the delete_from_json\r\n            //the only problem is that it moves the changed thing to the end of the list\r\n            // persons.filter(value => value !== person_holder).concat(returnedPerson)\r\n            // that is what the code used to look like ^^, the problem is no longer there\r\n            //setPersons(persons.map(person => person.id !== person_holder.id ? person : returnedPerson))\r\n            setSuccessMessage(`Changed ${returnedPerson.name}s number`)\r\n            setTimeout(() => {\r\n              setSuccessMessage(null)\r\n            }, 5000)\r\n          })\r\n          .catch(error =>\r\n            setErrorMessage(`Information of ${person_holder.name} has already been removed from the server`))\r\n        }\r\n    }\r\n    else {\r\n      add_to_json(newPerson)\r\n    }\r\n  }\r\n\r\n    return ( \r\n        <form onSubmit={addName}> \r\n          <div> name: <input value ={newName} onChange = {handleNameChange}/></div>\r\n          <div> number: <input value = {newNumber} onChange = {handleNumberChange}/></div>\r\n          <div>\r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n        </form>\r\n    )\r\n  }\r\n  \r\n//takes care of filtering the list, and showing the persons.\r\n//I have no idea how to make it seperate\r\nconst ShowPersons = ({persons,filterName,setPersons,setSuccessMessage}) => {\r\n  //just returns a filtered list to map, also makes everything lowercase\r\n  //when checking\r\n  const filtered = persons.filter(person => \r\n      person.name.toLowerCase().includes(filterName.toLowerCase()))\r\n\r\n  const delete_from_json = (noteObject) => {\r\n    if (window.confirm(`Delete ${noteObject.name}`) === true) {\r\n      personsService\r\n        .delete_json(noteObject)\r\n        .then(returnedPerson => {\r\n          //no idea if I had to do this, but took like an hour to figure out how to update\r\n          //this in realtime\r\n          setPersons(persons.filter(value => value !== noteObject))\r\n          setSuccessMessage(`Deleted ${noteObject.name}`)\r\n            setTimeout(() => {\r\n              setSuccessMessage(null)\r\n            }, 5000)\r\n        })\r\n    }\r\n  }\r\n  \r\n      return (\r\n        //changed it to use the i key instead of names for now\r\n        //since the json had its own ID:s, but since it was \r\n        //not required yet to use them I changed it to this.\r\n        <div>\r\n        {filtered.map((person,i) => \r\n            <div key={i}> \r\n            {person.name} {person.number}\r\n            <Button clicked = {() => delete_from_json(person)} text = 'delete'/>\r\n            </div>\r\n            )}\r\n        </div>\r\n      )\r\n}\r\n\r\nconst SuccessNotification = ({ message}) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"success\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst ErrorNotification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(\n  <App  />,\n  document.getElementById('root')\n)"],"sourceRoot":""}